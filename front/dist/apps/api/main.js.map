{"version":3,"file":"main.js","mappings":";;;;;;;;;;;AAAA,+DAM4B;AAE5B,IAAa,UAAU,GAAvB,MAAa,UAAU;IAAvB;QAEE,UAAK,GAAG,CAAC,CAAC;IAiBZ,CAAC;IAhBO,gBAAgB;;YACpB,yBAAyB;YACzB,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,4CAA4C;YAC5C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACxC,CAAC;KAAA;IACK,gBAAgB;;YACpB,4BAA4B;YAC5B,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,4CAA4C;YAC5C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACxC,CAAC;KAAA;IAEK,MAAM,CAAC,MAAM,EAAE,OAAO;;YAC1B,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACzC,CAAC;KAAA;CACF;AAlBoB;IAAlB,gCAAe,GAAE;;0CAAQ;AAe1B;IADC,iCAAgB,EAAC,MAAM,CAAC;;;;wCAGxB;AAlBU,UAAU;IADtB,iCAAgB,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;GACpB,UAAU,CAmBtB;AAnBY,gCAAU;;;;;;;;;;;;;ACRvB,uDAAiD;AAEjD,mFAA6D;AAE7D,+EAA2C;AAG3C,IAAa,aAAa,GAA1B,MAAa,aAAa;IACxB,YAA6B,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAAG,CAAC;IAGvD,OAAO;QACL,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;IACnC,CAAC;CACF;AAHC;IADC,gBAAG,EAAC,OAAO,CAAC;;;gEACF,wBAAO,oBAAP,wBAAO;4CAEjB;AANU,aAAa;IADzB,uBAAU,GAAE;iEAE8B,wBAAU,oBAAV,wBAAU;GADxC,aAAa,CAOzB;AAPY,sCAAa;;;;;;;;;;;;ACP1B,uDAAwC;AACxC,+EAA2C;AAE3C,qFAAiD;AACjD,+EAA2C;AAO3C,IAAa,SAAS,GAAtB,MAAa,SAAS;CAAG;AAAZ,SAAS;IALrB,mBAAM,EAAC;QACN,OAAO,EAAE,EAAE;QACX,WAAW,EAAE,CAAC,8BAAa,CAAC;QAC5B,SAAS,EAAE,CAAC,wBAAU,EAAE,wBAAU,CAAC;KACpC,CAAC;GACW,SAAS,CAAG;AAAZ,8BAAS;;;;;;;;;;;;ACXtB,uDAA4C;AAI5C,IAAa,UAAU,GAAvB,MAAa,UAAU;IACrB,OAAO;QACL,OAAO,EAAE,OAAO,EAAE,iBAAiB,EAAE,CAAC;IACxC,CAAC;CACF;AAJY,UAAU;IADtB,uBAAU,GAAE;GACA,UAAU,CAItB;AAJY,gCAAU;;;;;;;;;;;ACJvB,sGAAqC;;;;;;;;;;;;;;;;;AEArC;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;ACtBA;;;GAGG;;;AAEH,uDAAwC;AACxC,mDAA2C;AAG3C,6EAA6C;AAE7C,SAAe,SAAS;;QACtB,MAAM,GAAG,GAAG,MAAM,kBAAW,CAAC,MAAM,CAAC,sBAAS,CAAC,CAAC;QAEhD,GAAG,CAAC,UAAU,EAAE,CAAC;QACjB,MAAM,YAAY,GAAG,KAAK,CAAC;QAC3B,GAAG,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;QAClC,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC;QACtC,MAAM,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACvB,eAAM,CAAC,GAAG,CACR,kDAAkD,IAAI,IAAI,YAAY,EAAE,CACzE,CAAC;IACJ,CAAC;CAAA;AAED,SAAS,EAAE,CAAC","sources":["webpack://site-image-process/./apps/api/src/app/api.gateway.ts","webpack://site-image-process/./apps/api/src/app/app.controller.ts","webpack://site-image-process/./apps/api/src/app/app.module.ts","webpack://site-image-process/./apps/api/src/app/app.service.ts","webpack://site-image-process/./libs/api-interfaces/src/index.ts","webpack://site-image-process/./libs/api-interfaces/src/lib/api-interfaces.ts","webpack://site-image-process/external commonjs \"@nestjs/common\"","webpack://site-image-process/external commonjs \"@nestjs/core\"","webpack://site-image-process/external commonjs \"@nestjs/websockets\"","webpack://site-image-process/external commonjs \"tslib\"","webpack://site-image-process/webpack/bootstrap","webpack://site-image-process/./apps/api/src/main.ts"],"sourcesContent":["import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  OnGatewayConnection,\n  OnGatewayDisconnect\n} from '@nestjs/websockets';\n@WebSocketGateway({ cors: true })\nexport class ApiGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  @WebSocketServer() server;\n  users = 0;\n  async handleConnection() {\n    // A client has connected\n    this.users++;\n    // Notify connected clients of current users\n    this.server.emit('users', this.users);\n  }\n  async handleDisconnect() {\n    // A client has disconnected\n    this.users--;\n    // Notify connected clients of current users\n    this.server.emit('users', this.users);\n  }\n  @SubscribeMessage('chat')\n  async onChat(client, message) {\n    client.broadcast.emit('chat', message);\n  }\n}\n","import { Controller, Get } from '@nestjs/common';\n\nimport { Message } from '@site-image-process/api-interfaces';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get('hello')\n  getData(): Message {\n    return this.appService.getData();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { ApiGateway } from './api.gateway';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [AppService, ApiGateway]\n})\nexport class AppModule {}\n","import { Injectable } from '@nestjs/common';\nimport { Message } from '@site-image-process/api-interfaces';\n\n@Injectable()\nexport class AppService {\n  getData(): Message {\n    return { message: 'Welcome to api!' };\n  }\n}\n","export * from './lib/api-interfaces';\n","export interface Message {\n  message: string;\n}\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/websockets\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { IoAdapter } from '@nestjs/platform-socket.io';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n\n  app.enableCors();\n  const globalPrefix = 'api';\n  app.setGlobalPrefix(globalPrefix);\n  const port = process.env.PORT || 3333;\n  await app.listen(3333);\n  Logger.log(\n    `ðŸš€ Application is running on: http://localhost:${port}/${globalPrefix}`\n  );\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}